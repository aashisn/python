from __future__ import print_function

import boto3
import json
import logging
import os

from urllib2 import Request, urlopen, URLError, HTTPError

SLACK_CHANNEL       = os.environ['slackChannel']
HOOK_URL            = os.environ['HookUrl']
USER_NAME           = os.environ['project']
SLACK_ICON_EMOJI    = ":aws:"
logger              = logging.getLogger()

logger.setLevel(logging.INFO)


def lambda_handler(event, context):
    dbg_message = json.dumps(event)      #takes an object and produces a string

    try:
        logger.info('General Alarm: Can be used for Cloudwatch alerts e.g CPU alerts')
        message = json.loads(event['Records'][0]['Sns']['Message'])

        alarm_name = message['AlarmName']
        new_state = message['NewStateValue']
        reason = message['NewStateReason']
        
        slack_message = "%s state is now %s: %s" % (alarm_name, new_state, reason)
        slack_message_compose(slack_message, SLACK_CHANNEL, USER_NAME, SLACK_ICON_EMOJI)
        
    except (KeyError, TypeError) as e:
        try:
            logger.info('API Alerts: can be used on any API Alerts such as cloudtrail triggering login alerts')
            slack_message =  str('User: ' + event['detail']['userIdentity']['userName'] + event['detail']['userIdentity']['arn'] + ' : Initiated : ' + event['detail']['eventName'])
            slack_message_compose(slack_message, SLACK_CHANNEL, USER_NAME, SLACK_ICON_EMOJI)
        except (KeyError, TypeError) as e:
            try:
                logger.info('AWS.HEALTH Alerts: Health related alerts')
                slack_message =  str(event['detail']['eventDescription'][0]['latestDescription']  + "\n\n<https://phd.aws.amazon.com/phd/home?region=eu-west-1#/event-log?eventID=" + event['detail']['eventArn'] + "|Click here> for details.")
                slack_message_compose(slack_message, SLACK_CHANNEL, USER_NAME, SLACK_ICON_EMOJI)
            except (KeyError, TypeError) as e:
                try:
                    logger.info('EC2 Alerts: State of instance changed')
                    slack_message =  str("AWS Instance ID:" + event['detail']['instance-id'] + "::" + event['detail']['state'])
                    slack_message_compose(slack_message, SLACK_CHANNEL, USER_NAME, SLACK_ICON_EMOJI)
                except (KeyError, TypeError) as e:
                    try:
                        logger.info('5:')
                        slack_message =  str("Event Name:" + event['detail']['eventName'] + ": Event Type:" + event['detail']['eventType'] + ": User ARN:" + event['detail']['userIdentity']['sessionContext']['sessionIssuer']['arn'])
                        slack_message_compose(slack_message, SLACK_CHANNEL, USER_NAME, SLACK_ICON_EMOJI)
                    except (KeyError, TypeError) as e:
                        logger.info('6:')
                        slack_message = 'No rules matched :confused: \n\n Raw event:'
                        slack_message_compose(slack_message, SLACK_CHANNEL, USER_NAME, SLACK_ICON_EMOJI)


def slack_message_compose(slack_message, slack_channel, slack_username, slack_icon_emoji):
        slack_message = {
              'channel': slack_channel,
              'username': slack_username,
              'text': slack_message,
              'icon_emoji': slack_icon_emoji
        }
        alert(slack_message)

def alert(slack_message):
    logger.info(str(slack_message))

    req = Request(HOOK_URL, json.dumps(slack_message))
    try:
        response = urlopen(req)
        response.read()
        logger.info("Message posted to %s", slack_message['channel'])
    except HTTPError as e:
        logger.error("Request failed: %d %s", e.code, e.reason)
    except URLError as e:
        logger.error("Server connection failed: %s", e.reason)
